[{"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/index.js":"1","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/reportWebVitals.js":"2","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/App.js":"3","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Landing/Landing.js":"4","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Settings/Settings.js":"5","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Header/Header.js":"6","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/MyMap.js":"7","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/noLabels.js":"8","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/silver.js":"9","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/dark.js":"10","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/reducer.js":"11","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/store.js":"12","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/routes.js":"13","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/SearchMap/SearchMap.js":"14","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/original.js":"15","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/sunset.js":"16","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/InfoWindowComp/InfoWindowComp.js":"17","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Burger/Burger.js":"18","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Menu/Menu.js":"19","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Menu/Menu.styled.js":"20","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Burger/Burger.styled.js":"21","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/index.js":"22","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Menu/index.js":"23","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Burger/index.js":"24","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/hooks.js":"25","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/global.js":"26","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/theme.js":"27","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/useWindowDimensions.js":"28","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/FriendsProfile/FriendsProfile.js":"29"},{"size":798,"mtime":1613075389029,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1611790891162,"results":"32","hashOfConfig":"31"},{"size":242,"mtime":1616986453576,"results":"33","hashOfConfig":"31"},{"size":5650,"mtime":1617556738717,"results":"34","hashOfConfig":"31"},{"size":3346,"mtime":1617043253777,"results":"35","hashOfConfig":"31"},{"size":2981,"mtime":1617656270573,"results":"36","hashOfConfig":"31"},{"size":39497,"mtime":1617651643182,"results":"37","hashOfConfig":"31"},{"size":456,"mtime":1612896387394,"results":"38","hashOfConfig":"31"},{"size":4038,"mtime":1612896390674,"results":"39","hashOfConfig":"31"},{"size":3285,"mtime":1612896383338,"results":"40","hashOfConfig":"31"},{"size":1087,"mtime":1616269001109,"results":"41","hashOfConfig":"31"},{"size":192,"mtime":1616986479341,"results":"42","hashOfConfig":"31"},{"size":567,"mtime":1617645691582,"results":"43","hashOfConfig":"31"},{"size":2133,"mtime":1612906348231,"results":"44","hashOfConfig":"31"},{"size":341,"mtime":1616405416314,"results":"45","hashOfConfig":"31"},{"size":4439,"mtime":1616406693184,"results":"46","hashOfConfig":"31"},{"size":13294,"mtime":1617043464608,"results":"47","hashOfConfig":"31"},{"size":528,"mtime":1616959267727,"results":"48","hashOfConfig":"31"},{"size":519,"mtime":1617037670997,"results":"49","hashOfConfig":"31"},{"size":941,"mtime":1616987738474,"results":"50","hashOfConfig":"31"},{"size":930,"mtime":1616987955424,"results":"51","hashOfConfig":"31"},{"size":87,"mtime":1616959302604,"results":"52","hashOfConfig":"31"},{"size":34,"mtime":1616959241957,"results":"53","hashOfConfig":"31"},{"size":36,"mtime":1616959286413,"results":"54","hashOfConfig":"31"},{"size":492,"mtime":1616959813340,"results":"55","hashOfConfig":"31"},{"size":934,"mtime":1616959978643,"results":"56","hashOfConfig":"31"},{"size":131,"mtime":1616960014279,"results":"57","hashOfConfig":"31"},{"size":1214,"mtime":1617043279091,"results":"58","hashOfConfig":"31"},{"size":8453,"mtime":1617663709139,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"18tz2gy",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/index.js",[],["121","122"],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/reportWebVitals.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/App.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Landing/Landing.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Settings/Settings.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Header/Header.js",["123","124","125","126","127"],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/MyMap.js",["128","129","130","131"],"import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { v4 as randomString } from 'uuid'\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker\n}\n    from \"@react-google-maps/api\";\nimport SearchMap from '../SearchMap/SearchMap'\nimport { original } from \"./ColorThemes/original\"\nimport { dark } from \"./ColorThemes/dark\"\nimport { silver } from \"./ColorThemes/silver\"\nimport { noLabels } from './ColorThemes/noLabels'\nimport { sunset } from './ColorThemes/sunset'\nimport \"./MyMap.css\"\nimport InfoWindowComp from '../InfoWindowComp/InfoWindowComp'\nimport { ThemeProvider } from 'styled-components';\nimport { useOnClickOutside } from '../../hooks';\nimport { GlobalStyles } from '../../global';\nimport { theme } from '../../theme';\nimport { Burger, Menu } from '../../Components';\nimport FocusLock from 'react-focus-lock';\nimport useWindowDimensions from '../../useWindowDimensions'\n\nconst aws = require('aws-sdk')\nconst s3 = new aws.S3({\n    accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY\n})\n\nconst { REACT_APP_S3_BUCKET: S3_BUCKET } = process.env;\n\n//laptop\nconst mapContainerStyle = {\n    width: \"88vw\",\n    height: \"74vh\",\n    left: \"6vw\",\n    top: \"3vh\"\n}\n\n//largemobile landscape\nconst mapContainerStyle2 = {\n    width: \"100vw\",\n    height: \"100vh\",\n    left: \"0vw\",\n    top: \"0vh\"\n}\n\n//smallmobile landscape\nconst mapContainerStyle3 = {\n    width: \"100vw\",\n    height: \"100vh\",\n    left: \"0vw\",\n    top: \"0vh\"\n}\n\nconst center = {\n    lat: 34.373112,\n    lng: 6.252371\n}\n\n\nfunction MyMap(props) {\n\n    const [open, setOpen] = useState(false);\n    const node = useRef();\n    const menuId = \"main-menu\";\n\n    useOnClickOutside(node, () => setOpen(false));\n\n\n    const [libraries] = useState(['places']);\n\n    const { isLoaded, loadError } = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n        libraries,\n    });\n\n    //trips\n    const [markers, setMarkers] = useState([]);\n    const [selected, setSelected] = useState(null)\n    const [cityCount, setCities] = useState(\" \");\n    const [countryCount, setCountries] = useState(\" \");\n    const [showView, changeView] = useState(true)\n    const [dateView, changeDateView] = useState(false);\n    // Inputs\n    const [startDate, setStart] = useState('');\n    const [endDate, setEnd] = useState('');\n    const [ratingInp, setRating] = useState(0);\n    const [commentInp, setComment] = useState('');\n    // Editing Trip Info\n    const [toggleTripEdit, setToggleTripEdit] = useState(false)\n    const [newStartDate, setNewStart] = useState('')\n    const [newEndDate, setNewEnd] = useState('')\n    const [newRating, setNewRating] = useState('')\n    const [newComment, setNewComment] = useState('')\n    const [newFile, setNewFile] = useState({ name: '' })\n    const [colors, setColors] = useState(null)\n\n    //Aws\n    const [file, setFile] = useState({ name: '' })\n    const [fileView, setFileView] = useState(false)\n\n    //Device type/orientation\n    const { device, orientation } = useWindowDimensions();\n\n    const setUserColor = () => {\n        if (props.user.theme === 'Dark') {\n            setColors(dark)\n        } else if (props.user.theme === \"Silver\") {\n            setColors(silver)\n        } else if (props.user.theme === \"No Labels\") {\n            setColors(noLabels)\n        } else if (props.user.theme === \"Original\") {\n            setColors(original)\n        } else if (props.user.theme === \"Sunset\") {\n            setColors(sunset)\n        }\n    }\n\n    const getCount = () => {\n        if (props.user.id) {\n            axios.get(`/api/trip-count/${props.user.id}`)\n                .then(res => {\n                    setCountries(res.data[0].countries)\n                    setCities(res.data[0].cities)\n                })\n        }\n    }\n\n    console.log(props)\n    // console.log(device, orientation)\n    useEffect(() => {\n        setUserColor();\n        axios.get('/api/user')\n            .then(res => {\n                //returning users - load data off of session\n                if (res.data[1][0]) {\n                    setCountries(res.data[2][0].countries)\n                    setCities(res.data[2][0].cities)\n                    setMarkers(res.data[1])\n                }\n                //new users\n                else {\n                    setCountries(props.count[0].countries)\n                    setCities(props.count[0].cities)\n                    setMarkers(props.markers)\n                }\n            })\n    }, [])\n\n    let options = {\n        styles: colors,\n        disableDefaultUI: true,\n        zoomControl: true,\n        minZoom: 1.5\n    }\n\n    // too (hopefully) cause less re-renders\n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback((map) => {\n        mapRef.current = map;\n    }, []);\n\n    if (loadError) return \"Error loading maps\";\n    if (!isLoaded) return \"Loading Maps\"\n\n    // Add Markers\n    const addmarker = (coordinates) => {\n        if (props.user.id) {\n            axios.post('/api/newtrip', { id: props.user.id, name: coordinates.address, lat: coordinates.lat, lng: coordinates.lng })\n                .then(res => {\n                    getCount();\n                    setMarkers(current => [...current, {\n                        name: coordinates.address,\n                        lat: coordinates.lat,\n                        lng: coordinates.lng,\n                        trip_id: res.data.trip_id\n                    }])\n                })\n                .catch(err => console.log(err))\n        }\n    }\n\n    const toggle = () => {\n        changeView(!showView)\n        setSelected(null)\n    }\n\n    const toggleDateView = () => {\n        changeDateView(!dateView)\n    }\n\n    const toggleFileView = () => {\n        setFileView(!fileView)\n    }\n\n    // Confirm Closing of Info Window\n    const confirmClose = () => {\n        let result = window.confirm('Are you sure you want to stop editing this trip? All your data will be lost')\n        if (result === true) {\n            setStart('')\n            setEnd('')\n            setRating('')\n            setComment('')\n            setFile({})\n            setSelected(null)\n        } else if (result === false) {\n            let copySelected = selected\n            let copyStart = startDate;\n            let copyEnd = endDate;\n            let copyRating = ratingInp;\n            let copyComment = commentInp;\n            setSelected(null)\n            setSelected(copySelected)\n            setStart(copyStart)\n            setEnd(copyEnd)\n            setRating(+copyRating)\n            setComment(copyComment)\n            setFile({})\n        }\n    }\n\n    const handleClose = () => {\n        startDate || endDate || ratingInp || commentInp || file.name ? confirmClose() : setSelected(null)\n    }\n\n    const handleEdit = () => {\n        setToggleTripEdit(!toggleTripEdit)\n        setNewStart(selected.start_date.substring(0, 10))\n        setNewEnd(selected.end_date.substring(0, 10))\n        setNewRating(selected.rating)\n        setNewComment(selected.comment)\n    }\n\n    // Edit Trip Info\n    const handleTripEditSubmit = (e) => {\n        e.preventDefault();\n        axios.put('/api/trip', {\n            trip_id: selected.trip_id, start_date: newStartDate, end_date: newEndDate, rating: newRating, comment: newComment, file: newFile\n        })\n            .then(res => {\n                let copyMarkers = [...markers];\n                for (let i = 0; i < copyMarkers.length; i++) {\n                    if (copyMarkers[i].trip_id === res.data.trip_id) {\n                        copyMarkers[i].start_date = res.data.start_date\n                        copyMarkers[i].end_date = res.data.end_date\n                        copyMarkers[i].rating = res.data.rating\n                        copyMarkers[i].comment = res.data.comment\n                        { newFile.name ? getSignedRequest(newFile) : console.log('no itinerary submitted') }\n                    }\n                }\n                setMarkers(copyMarkers)\n                setToggleTripEdit(!toggleTripEdit)\n\n                setStart('')\n                setEnd('')\n                setRating('')\n                setComment('')\n                setNewComment({})\n\n            })\n            .catch(err => console.log(err))\n    }\n\n    // Submit Trip Info\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        axios.post('/api/tripinfo', { trip_id: selected.trip_id, startDate, endDate, ratingInp, commentInp })\n            .then(res => {\n                let copyMarkers = [...markers];\n                for (let i = 0; i < copyMarkers.length; i++) {\n                    if (copyMarkers[i].trip_id === res.data.trip_id) {\n                        copyMarkers[i].start_date = res.data.start_date\n                        copyMarkers[i].end_date = res.data.end_date\n                        copyMarkers[i].rating = res.data.rating\n                        copyMarkers[i].comment = res.data.comment\n                        { file.name ? getSignedRequest(file) : console.log('no itinerary submitted') }\n                    }\n                }\n                setMarkers(copyMarkers)\n                setStart('')\n                setEnd('')\n                setRating('')\n                setComment('')\n                setFile({})\n            })\n            .catch(err => console.log(err))\n    }\n\n    //AWS\n    const getSignedRequest = (file) => {\n        const fileName = `${randomString()}-${file.name.replace(/\\s/g, '-')}`\n\n        axios.get('/sign-s3', {\n            params: {\n                'file-name': fileName,\n                'file-type': file.type\n            }\n        }).then((response) => {\n            const { signedRequest, url } = response.data\n            uploadFile(file, signedRequest, url)\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    const uploadFile = (file, signedRequest, url) => {\n        const options = {\n            headers: {\n                'Content-Type': file.type,\n            },\n        };\n\n        axios\n            .put(signedRequest, file, options)\n            .then(response => {\n                axios.post('/api/file', { url, trip_id: selected.trip_id })\n                    .then(res => {\n                        // console.log(res.data)\n                        let copyArray = [...markers]\n                        for (let i = 0; i < copyArray.length; i++) {\n                            if (selected.trip_id === copyArray[i].trip_id) {\n                                copyArray[i].file = res.data.file\n                            }\n                        }\n                        setMarkers(copyArray)\n                    })\n                    .catch(err => console.log(err))\n            })\n            .catch(err => {\n                if (err.response.status === 403) {\n                    alert(\n                        `Your request for a signed URL failed with a status 403. Double check the CORS configuration and bucket policy in the README. You also will want to double check your AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in your .env and ensure that they are the same as the ones that you created in the IAM dashboard. You may need to generate new keys\\n${err.stack\n                        }`\n                    );\n                } else {\n                    alert(`ERROR: ${err.status}\\n ${err.stack}`);\n                }\n            });\n    };\n\n    const doNothing = () => {\n        return undefined\n    }\n\n    // Delete Markers\n    const handleDelete = () => {\n        if (props.user.id) {\n            axios.delete(`/api/trip/${selected.trip_id}`)\n                .then(res => {\n                    //remove the trip from state and re-set state here\n                    let copyMarkers = [...markers]\n                    for (let i = 0; i < copyMarkers.length; i++) {\n                        if (copyMarkers[i].trip_id === selected.trip_id) {\n                            copyMarkers.splice(i, 1)\n                        }\n                    }\n                    setMarkers(copyMarkers)\n\n                    //add another axios call for count\n                    axios.get(`/api/trip-count/${props.user.id}`)\n                        .then(response => {\n                            setCities(response.data[0].cities)\n                            setCountries(response.data[0].countries)\n                        })\n\n                    { selected.file ? DeleteAwsFile() : doNothing() }\n                })\n                .catch(err => console.log(err))\n            setSelected(null)\n        }\n    }\n\n    let DeleteAwsFile = () => {\n        const params = {\n            Bucket: S3_BUCKET,\n            Key: selected.file.substring(47) //pushes the file that AWS recognizes (removes https:....)\n        };\n        //delete the file from db\n        // axios.put('/api/file', { trip_id: selected.trip_id })\n        //     .then(res => console.log(res.data))\n        //     .catch(err => console.log(err))\n\n        s3.deleteObject(params, function (err, data) {\n            if (err) console.log(err, err.stack); // an error occurred\n            else console.log(data);           // successful response\n            /*\n            data = {\n            }\n            */\n        });\n    }\n\n    return (\n        <div id='map-background'>\n\n            {/* CONDITIONAL RENDERING FOR LAPTOP */}\n            {device === 'laptop' ? (\n                <GoogleMap className='myMapLaptop'\n                    mapContainerStyle={mapContainerStyle}\n                    zoom={2.15}\n                    center={center}\n                    options={options}\n                    onLoad={onMapLoad} >\n\n                    {showView\n                        ? (\n                            <h2 className='AddBtn' onClick={toggle} title='Click to add trips'>Add +</h2>\n                        )\n                        : (\n                            < div className='search-container'>\n                                <SearchMap addmarker={addmarker} />\n                                <h2 title=\"Click to close search\" className='MinusBtn' onClick={toggle}>-</h2>\n                            </div>\n\n                        )}\n\n                    {markers.map((marker, i) => (\n                        < Marker\n                            key={i}\n                            title='Click to add trip info'\n                            position={{ lat: +marker.lat || marker.lat, lng: +marker.lng || marker.lng }}\n                            // icon = {{ url: \"\", scaledSize: new window.google.maps.Size(30, 30) }}\n                            onClick={() => {\n                                setSelected(marker);\n                                changeView(true)\n                            }}\n                        />\n                    ))}\n\n                    <div className=\"count\">\n                        <h2 id='countDisplay'>Cities <br /><span className='countDisplay'>{cityCount}</span></h2>\n                        <h2 id='countDisplay'>Countries <br /><span className='countDisplay'>{countryCount}</span></h2>\n                    </div>\n\n\n                    <InfoWindowComp\n                        selected={selected}\n                        handleClose={handleClose}\n                        handleDelete={handleDelete}\n                        toggleTripEdit={toggleTripEdit}\n                        handleEdit={handleEdit}\n                        newStartDate={newStartDate}\n                        setNewStart={setNewStart}\n                        newEndDate={newEndDate}\n                        setNewEnd={setNewEnd}\n                        newRating={newRating}\n                        setNewRating={setNewRating}\n                        newComment={newComment}\n                        setNewComment={setNewComment}\n                        toggleFileView={toggleFileView}\n                        setNewFile={setNewFile}\n                        handleTripEditSubmit={handleTripEditSubmit}\n                        handleSubmit={handleSubmit}\n                        dateView={dateView}\n                        toggleDateView={toggleDateView}\n                        startDate={startDate}\n                        setStart={setStart}\n                        endDate={endDate}\n                        setEnd={setEnd}\n                        setRating={setRating}\n                        ratingInp={ratingInp}\n                        setComment={setComment}\n                        commentInp={commentInp}\n                        setFile={setFile}\n                        fileView={fileView}\n                        newFile={newFile}\n                    />\n\n                </GoogleMap>\n            ) : null}\n\n            {/* CONDITIONAL RENDERING FOR TABLET IN LANDSCAPE */}\n            {device === 'tablet' && orientation === 'landscape' ? (\n                <GoogleMap className='myMapLaptop'\n                    mapContainerStyle={mapContainerStyle}\n                    zoom={2}\n                    center={center}\n                    options={options}\n                    onLoad={onMapLoad} >\n\n                    {showView\n                        ? (\n                            <h2 className='AddBtn' onClick={toggle} title='Click to add trips'>Add +</h2>\n                        )\n                        : (\n                            < div className='search-container'>\n                                <SearchMap addmarker={addmarker} />\n                                <h2 title=\"Click to close search\" className='MinusBtn' onClick={toggle}>-</h2>\n                            </div>\n\n                        )}\n\n                    {markers.map((marker, i) => (\n                        < Marker\n                            key={i}\n                            title='Click to add trip info'\n                            position={{ lat: +marker.lat || marker.lat, lng: +marker.lng || marker.lng }}\n                            // icon = {{ url: \"\", scaledSize: new window.google.maps.Size(30, 30) }}\n                            onClick={() => {\n                                setSelected(marker);\n                                changeView(true)\n                            }}\n                        />\n                    ))}\n\n                    <div className=\"count\">\n                        <h2 id='countDisplay'>Cities <br /><span className='countDisplay'>{cityCount}</span></h2>\n                        <h2 id='countDisplay'>Countries <br /><span className='countDisplay'>{countryCount}</span></h2>\n                    </div>\n\n\n                    <InfoWindowComp\n                        selected={selected}\n                        handleClose={handleClose}\n                        handleDelete={handleDelete}\n                        toggleTripEdit={toggleTripEdit}\n                        handleEdit={handleEdit}\n                        newStartDate={newStartDate}\n                        setNewStart={setNewStart}\n                        newEndDate={newEndDate}\n                        setNewEnd={setNewEnd}\n                        newRating={newRating}\n                        setNewRating={setNewRating}\n                        newComment={newComment}\n                        setNewComment={setNewComment}\n                        toggleFileView={toggleFileView}\n                        setNewFile={setNewFile}\n                        handleTripEditSubmit={handleTripEditSubmit}\n                        handleSubmit={handleSubmit}\n                        dateView={dateView}\n                        toggleDateView={toggleDateView}\n                        startDate={startDate}\n                        setStart={setStart}\n                        endDate={endDate}\n                        setEnd={setEnd}\n                        setRating={setRating}\n                        ratingInp={ratingInp}\n                        setComment={setComment}\n                        commentInp={commentInp}\n                        setFile={setFile}\n                        fileView={fileView}\n                        newFile={newFile}\n                    />\n\n                </GoogleMap>\n            ) : null}\n\n            {/* CONDITIONAL RENDERING FOR TABLET IN portrait */}\n            {device === 'tablet' && orientation === 'portrait' ? (\n                <GoogleMap className='myMapLaptop'\n                    mapContainerStyle={mapContainerStyle}\n                    zoom={2.15}\n                    center={center}\n                    options={options}\n                    onLoad={onMapLoad} >\n\n                    {showView\n                        ? (\n                            <h2 className='AddBtn' onClick={toggle} title='Click to add trips'>Add +</h2>\n                        )\n                        : (\n                            < div className='search-container'>\n                                <SearchMap addmarker={addmarker} />\n                                <h2 title=\"Click to close search\" className='MinusBtn' onClick={toggle}>-</h2>\n                            </div>\n\n                        )}\n\n                    {markers.map((marker, i) => (\n                        < Marker\n                            key={i}\n                            title='Click to add trip info'\n                            position={{ lat: +marker.lat || marker.lat, lng: +marker.lng || marker.lng }}\n                            // icon = {{ url: \"\", scaledSize: new window.google.maps.Size(30, 30) }}\n                            onClick={() => {\n                                setSelected(marker);\n                                changeView(true)\n                            }}\n                        />\n                    ))}\n\n                    <div className=\"count\">\n                        <h2 id='countDisplay'>Cities <br /><span className='countDisplay'>{cityCount}</span></h2>\n                        <h2 id='countDisplay'>Countries <br /><span className='countDisplay'>{countryCount}</span></h2>\n                    </div>\n\n\n                    <InfoWindowComp\n                        selected={selected}\n                        handleClose={handleClose}\n                        handleDelete={handleDelete}\n                        toggleTripEdit={toggleTripEdit}\n                        handleEdit={handleEdit}\n                        newStartDate={newStartDate}\n                        setNewStart={setNewStart}\n                        newEndDate={newEndDate}\n                        setNewEnd={setNewEnd}\n                        newRating={newRating}\n                        setNewRating={setNewRating}\n                        newComment={newComment}\n                        setNewComment={setNewComment}\n                        toggleFileView={toggleFileView}\n                        setNewFile={setNewFile}\n                        handleTripEditSubmit={handleTripEditSubmit}\n                        handleSubmit={handleSubmit}\n                        dateView={dateView}\n                        toggleDateView={toggleDateView}\n                        startDate={startDate}\n                        setStart={setStart}\n                        endDate={endDate}\n                        setEnd={setEnd}\n                        setRating={setRating}\n                        ratingInp={ratingInp}\n                        setComment={setComment}\n                        commentInp={commentInp}\n                        setFile={setFile}\n                        fileView={fileView}\n                        newFile={newFile}\n                    />\n\n                </GoogleMap>\n            ) : null}\n\n            {/* CONDITIONAL RENDERING FOR large-mobile IN LANDSCAPE */}\n            {device === 'largeMobile' && orientation === 'landscape' ? (\n                <>\n                    <ThemeProvider theme={theme}>\n                        <>\n                            <GlobalStyles />\n                            <div ref={node}>\n                                <FocusLock disabled={!open}>\n                                    <Burger open={open} setOpen={setOpen} aria-controls={menuId} />\n                                    <Menu open={open} setOpen={setOpen} id={menuId} />\n                                </FocusLock>\n                            </div>\n                        </>\n                    </ThemeProvider>\n                    <GoogleMap className='myMapLaptop'\n                        mapContainerStyle={mapContainerStyle2}\n                        zoom={1}\n                        center={center}\n                        options={options}\n                        onLoad={onMapLoad} >\n\n                        {showView\n                            ? (\n                                <h2 className='AddBtn' onClick={toggle} title='Click to add trips'>Add +</h2>\n                            )\n                            : (\n                                < div className='search-container'>\n                                    <SearchMap addmarker={addmarker} />\n                                    <h2 title=\"Click to close search\" className='MinusBtn' onClick={toggle}>-</h2>\n                                </div>\n\n                            )}\n\n                        {markers.map((marker, i) => (\n                            < Marker\n                                key={i}\n                                title='Click to add trip info'\n                                position={{ lat: +marker.lat || marker.lat, lng: +marker.lng || marker.lng }}\n                                // icon = {{ url: \"\", scaledSize: new window.google.maps.Size(30, 30) }}\n                                onClick={() => {\n                                    setSelected(marker);\n                                    changeView(true)\n                                }}\n                            />\n                        ))}\n\n                        <div className=\"count\">\n                            <h2 id='countDisplay'>Cities <br /><span className='countDisplay'>{cityCount}</span></h2>\n                            <h2 id='countDisplay'>Countries <br /><span className='countDisplay'>{countryCount}</span></h2>\n                        </div>\n\n\n                        <InfoWindowComp\n                            selected={selected}\n                            handleClose={handleClose}\n                            handleDelete={handleDelete}\n                            toggleTripEdit={toggleTripEdit}\n                            handleEdit={handleEdit}\n                            newStartDate={newStartDate}\n                            setNewStart={setNewStart}\n                            newEndDate={newEndDate}\n                            setNewEnd={setNewEnd}\n                            newRating={newRating}\n                            setNewRating={setNewRating}\n                            newComment={newComment}\n                            setNewComment={setNewComment}\n                            toggleFileView={toggleFileView}\n                            setNewFile={setNewFile}\n                            handleTripEditSubmit={handleTripEditSubmit}\n                            handleSubmit={handleSubmit}\n                            dateView={dateView}\n                            toggleDateView={toggleDateView}\n                            startDate={startDate}\n                            setStart={setStart}\n                            endDate={endDate}\n                            setEnd={setEnd}\n                            setRating={setRating}\n                            ratingInp={ratingInp}\n                            setComment={setComment}\n                            commentInp={commentInp}\n                            setFile={setFile}\n                            fileView={fileView}\n                            newFile={newFile}\n                        />\n\n                    </GoogleMap>\n                </>\n            ) : null}\n\n            {/* CONDITIONAL RENDERING FOR large-mobile IN portrait */}\n            {device === 'largeMobile' && orientation === 'portrait' ? (\n                <GoogleMap className='myMapLaptop'\n                    mapContainerStyle={mapContainerStyle}\n                    zoom={2.15}\n                    center={center}\n                    options={options}\n                    onLoad={onMapLoad} >\n\n                    {showView\n                        ? (\n                            <h2 className='AddBtn' onClick={toggle} title='Click to add trips'>Add +</h2>\n                        )\n                        : (\n                            < div className='search-container'>\n                                <SearchMap addmarker={addmarker} />\n                                <h2 title=\"Click to close search\" className='MinusBtn' onClick={toggle}>-</h2>\n                            </div>\n\n                        )}\n\n                    {markers.map((marker, i) => (\n                        < Marker\n                            key={i}\n                            title='Click to add trip info'\n                            position={{ lat: +marker.lat || marker.lat, lng: +marker.lng || marker.lng }}\n                            // icon = {{ url: \"\", scaledSize: new window.google.maps.Size(30, 30) }}\n                            onClick={() => {\n                                setSelected(marker);\n                                changeView(true)\n                            }}\n                        />\n                    ))}\n\n                    <div className=\"count\">\n                        <h2 id='countDisplay'>Cities <br /><span className='countDisplay'>{cityCount}</span></h2>\n                        <h2 id='countDisplay'>Countries <br /><span className='countDisplay'>{countryCount}</span></h2>\n                    </div>\n\n\n                    <InfoWindowComp\n                        selected={selected}\n                        handleClose={handleClose}\n                        handleDelete={handleDelete}\n                        toggleTripEdit={toggleTripEdit}\n                        handleEdit={handleEdit}\n                        newStartDate={newStartDate}\n                        setNewStart={setNewStart}\n                        newEndDate={newEndDate}\n                        setNewEnd={setNewEnd}\n                        newRating={newRating}\n                        setNewRating={setNewRating}\n                        newComment={newComment}\n                        setNewComment={setNewComment}\n                        toggleFileView={toggleFileView}\n                        setNewFile={setNewFile}\n                        handleTripEditSubmit={handleTripEditSubmit}\n                        handleSubmit={handleSubmit}\n                        dateView={dateView}\n                        toggleDateView={toggleDateView}\n                        startDate={startDate}\n                        setStart={setStart}\n                        endDate={endDate}\n                        setEnd={setEnd}\n                        setRating={setRating}\n                        ratingInp={ratingInp}\n                        setComment={setComment}\n                        commentInp={commentInp}\n                        setFile={setFile}\n                        fileView={fileView}\n                        newFile={newFile}\n                    />\n\n                </GoogleMap>\n            ) : null}\n\n            {/* CONDITIONAL RENDERING FOR small-mobile IN portrait */}\n            {device === 'smallMobile' && orientation === 'portrait' ? (\n                <>\n                    <div>Flip for better experience</div>\n\n\n                    <GoogleMap className='myMapLaptop'\n                        mapContainerStyle={mapContainerStyle}\n                        zoom={1}\n                        center={center}\n                        options={options}\n                        onLoad={onMapLoad} >\n\n                        {showView\n                            ? (\n                                <h2 className='AddBtn' onClick={toggle} title='Click to add trips'>Add +</h2>\n                            )\n                            : (\n                                < div className='search-container'>\n                                    <SearchMap addmarker={addmarker} />\n                                    <h2 title=\"Click to close search\" className='MinusBtn' onClick={toggle}>-</h2>\n                                </div>\n\n                            )}\n\n                        {markers.map((marker, i) => (\n                            < Marker\n                                key={i}\n                                title='Click to add trip info'\n                                position={{ lat: +marker.lat || marker.lat, lng: +marker.lng || marker.lng }}\n                                // icon = {{ url: \"\", scaledSize: new window.google.maps.Size(30, 30) }}\n                                onClick={() => {\n                                    setSelected(marker);\n                                    changeView(true)\n                                }}\n                            />\n                        ))}\n\n                        <div className=\"count\">\n                            <h2 id='countDisplay'>Cities <br /><span className='countDisplay'>{cityCount}</span></h2>\n                            <h2 id='countDisplay'>Countries <br /><span className='countDisplay'>{countryCount}</span></h2>\n                        </div>\n\n\n                        <InfoWindowComp\n                            selected={selected}\n                            handleClose={handleClose}\n                            handleDelete={handleDelete}\n                            toggleTripEdit={toggleTripEdit}\n                            handleEdit={handleEdit}\n                            newStartDate={newStartDate}\n                            setNewStart={setNewStart}\n                            newEndDate={newEndDate}\n                            setNewEnd={setNewEnd}\n                            newRating={newRating}\n                            setNewRating={setNewRating}\n                            newComment={newComment}\n                            setNewComment={setNewComment}\n                            toggleFileView={toggleFileView}\n                            setNewFile={setNewFile}\n                            handleTripEditSubmit={handleTripEditSubmit}\n                            handleSubmit={handleSubmit}\n                            dateView={dateView}\n                            toggleDateView={toggleDateView}\n                            startDate={startDate}\n                            setStart={setStart}\n                            endDate={endDate}\n                            setEnd={setEnd}\n                            setRating={setRating}\n                            ratingInp={ratingInp}\n                            setComment={setComment}\n                            commentInp={commentInp}\n                            setFile={setFile}\n                            fileView={fileView}\n                            newFile={newFile}\n                        />\n\n                    </GoogleMap>\n\n                </>\n            ) : null}\n\n\n            {/* CONDITIONAL RENDERING FOR small-mobile IN landscape */}\n            {device === 'smallMobile' && orientation === 'landscape' ? (\n                <>\n                    <ThemeProvider theme={theme}>\n                        <>\n                            <GlobalStyles />\n                            <div ref={node}>\n                                <FocusLock disabled={!open}>\n                                    <Burger open={open} setOpen={setOpen} aria-controls={menuId} />\n                                    <Menu open={open} setOpen={setOpen} id={menuId} />\n                                </FocusLock>\n                            </div>\n                        </>\n                    </ThemeProvider>\n\n                    <GoogleMap className='myMapLaptop'\n                        mapContainerStyle={mapContainerStyle3}\n                        zoom={1}\n                        center={center}\n                        options={options}\n                        onLoad={onMapLoad} >\n\n                        {showView\n                            ? (\n                                <h2 className='AddBtn' onClick={toggle} title='Click to add trips'>Add +</h2>\n                            )\n                            : (\n                                < div className='search-container'>\n                                    <SearchMap addmarker={addmarker} />\n                                    <h2 title=\"Click to close search\" className='MinusBtn' onClick={toggle}>-</h2>\n                                </div>\n\n                            )}\n\n                        {markers.map((marker, i) => (\n                            < Marker\n                                key={i}\n                                title='Click to add trip info'\n                                position={{ lat: +marker.lat || marker.lat, lng: +marker.lng || marker.lng }}\n                                // icon = {{ url: \"\", scaledSize: new window.google.maps.Size(30, 30) }}\n                                onClick={() => {\n                                    setSelected(marker);\n                                    changeView(true)\n                                }}\n                            />\n                        ))}\n\n                        <InfoWindowComp\n                            selected={selected}\n                            handleClose={handleClose}\n                            handleDelete={handleDelete}\n                            toggleTripEdit={toggleTripEdit}\n                            handleEdit={handleEdit}\n                            newStartDate={newStartDate}\n                            setNewStart={setNewStart}\n                            newEndDate={newEndDate}\n                            setNewEnd={setNewEnd}\n                            newRating={newRating}\n                            setNewRating={setNewRating}\n                            newComment={newComment}\n                            setNewComment={setNewComment}\n                            toggleFileView={toggleFileView}\n                            setNewFile={setNewFile}\n                            handleTripEditSubmit={handleTripEditSubmit}\n                            handleSubmit={handleSubmit}\n                            dateView={dateView}\n                            toggleDateView={toggleDateView}\n                            startDate={startDate}\n                            setStart={setStart}\n                            endDate={endDate}\n                            setEnd={setEnd}\n                            setRating={setRating}\n                            ratingInp={ratingInp}\n                            setComment={setComment}\n                            commentInp={commentInp}\n                            setFile={setFile}\n                            fileView={fileView}\n                            newFile={newFile}\n                        />\n\n                    </GoogleMap>\n                    <br /><br />\n                    <div className=\"count\">\n                        <h2 id='countDisplay'>Cities <br /><span className='countDisplay'>{cityCount}</span></h2>\n                        <h2 id='countDisplay'>Countries <br /><span className='countDisplay'>{countryCount}</span></h2>\n                    </div>\n                </>\n\n            ) : null}\n\n\n\n        </div >\n    )\n}\n\nconst mapStateToProps = reduxState => ({\n    user: reduxState.userReducer.user,\n    markers: reduxState.userReducer.markers,\n    count: reduxState.userReducer.count\n})\n\nexport default connect(mapStateToProps)(MyMap)","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/noLabels.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/silver.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/dark.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/reducer.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/store.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/routes.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/SearchMap/SearchMap.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/original.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/sunset.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/InfoWindowComp/InfoWindowComp.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Burger/Burger.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Menu/Menu.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Menu/Menu.styled.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Burger/Burger.styled.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/index.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Menu/index.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Burger/index.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/hooks.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/global.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/theme.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/useWindowDimensions.js",["132"],"import { useState, useEffect } from 'react';\n\nexport default function useWindowDimensions() {\n\n  const hasWindow = typeof window !== 'undefined';\n  let device;\n  let orientation;\n\n  function getWindowDimensions() {\n    const width = hasWindow ? window.innerWidth : null;\n    const height = hasWindow ? window.innerHeight : null;\n\n    if (width > height) {\n      orientation = 'landscape'\n    } else if (height > width) {\n      orientation = 'portrait'\n    }\n    if (width >= 1350) {\n      device = 'laptop'\n    } else if (width >= 824 && width < 1350) {\n      device = 'tablet'\n    } else if (width > 700 && width < 824) {\n      device = 'largeMobile'\n    } else if (width > 0 && width <= 700) {\n      device = 'smallMobile'\n    }\n    // console.log(device)\n    return {\n      orientation,\n      device,\n    };\n  }\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    if (hasWindow) {\n      function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [hasWindow]);\n\n  return (windowDimensions)\n}","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/FriendsProfile/FriendsProfile.js",["133","134","135"],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":14,"column":10,"nodeType":"142","messageId":"143","endLine":14,"endColumn":19},{"ruleId":"140","severity":1,"message":"144","line":19,"column":12,"nodeType":"142","messageId":"143","endLine":19,"endColumn":17},{"ruleId":"140","severity":1,"message":"145","line":19,"column":19,"nodeType":"142","messageId":"143","endLine":19,"endColumn":27},{"ruleId":"140","severity":1,"message":"146","line":20,"column":18,"nodeType":"142","messageId":"143","endLine":20,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":31,"column":8,"nodeType":"149","endLine":31,"endColumn":23,"suggestions":"150"},{"ruleId":"147","severity":1,"message":"151","line":152,"column":8,"nodeType":"149","endLine":152,"endColumn":10,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":252,"column":25,"nodeType":"155","messageId":"156","endLine":252,"endColumn":109},{"ruleId":"153","severity":1,"message":"154","line":280,"column":25,"nodeType":"155","messageId":"156","endLine":280,"endColumn":103},{"ruleId":"153","severity":1,"message":"154","line":370,"column":21,"nodeType":"155","messageId":"156","endLine":370,"endColumn":70},{"ruleId":"147","severity":1,"message":"157","line":44,"column":6,"nodeType":"149","endLine":44,"endColumn":17,"suggestions":"158"},{"ruleId":"140","severity":1,"message":"159","line":50,"column":12,"nodeType":"142","messageId":"143","endLine":50,"endColumn":20},{"ruleId":"140","severity":1,"message":"160","line":50,"column":22,"nodeType":"142","messageId":"143","endLine":50,"endColumn":32},{"ruleId":"147","severity":1,"message":"161","line":56,"column":8,"nodeType":"149","endLine":56,"endColumn":10,"suggestions":"162"},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'setISODay' is defined but never used.","Identifier","unusedVar","'first' is assigned a value but never used.","'setFirst' is assigned a value but never used.","'setLast' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleSearch'. Either include it or remove the dependency array.","ArrayExpression",["165"],"React Hook useEffect has missing dependencies: 'props.count', 'props.markers', and 'setUserColor'. Either include them or remove the dependency array. If 'setCountries' needs the current value of 'props.count', you can also switch to useReducer instead of useState and read 'props.count' in the reducer.",["166"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'getWindowDimensions'. Either include it or remove the dependency array.",["167"],"'showView' is assigned a value but never used.","'changeView' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array. If 'setId' needs the current value of 'props.match.params.id', you can also switch to useReducer instead of useState and read 'props.match.params.id' in the reducer.",["168"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [textVal, last, handleSearch]",{"range":"177","text":"178"},"Update the dependencies array to be: [props.count, props.markers, setUserColor]",{"range":"179","text":"180"},"Update the dependencies array to be: [getWindowDimensions, hasWindow]",{"range":"181","text":"182"},"Update the dependencies array to be: [props.match.params.id]",{"range":"183","text":"184"},[810,825],"[textVal, last, handleSearch]",[4569,4571],"[props.count, props.markers, setUserColor]",[1170,1181],"[getWindowDimensions, hasWindow]",[1489,1491],"[props.match.params.id]"]