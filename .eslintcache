[{"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/index.js":"1","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/reportWebVitals.js":"2","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/App.js":"3","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Landing/Landing.js":"4","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Settings/Settings.js":"5","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Header/Header.js":"6","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/MyMap.js":"7","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/noLabels.js":"8","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/silver.js":"9","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/dark.js":"10","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/reducer.js":"11","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/store.js":"12","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/routes.js":"13","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/SearchMap/SearchMap.js":"14","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/themereducer.js":"15","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/themeReducer.js":"16"},{"size":706,"mtime":1612903904589,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1611790891162,"results":"19","hashOfConfig":"18"},{"size":243,"mtime":1612908122964,"results":"20","hashOfConfig":"18"},{"size":5058,"mtime":1612905817506,"results":"21","hashOfConfig":"18"},{"size":4230,"mtime":1612911236665,"results":"22","hashOfConfig":"18"},{"size":1910,"mtime":1612897054711,"results":"23","hashOfConfig":"18"},{"size":18318,"mtime":1612911992591,"results":"24","hashOfConfig":"18"},{"size":456,"mtime":1612896387394,"results":"25","hashOfConfig":"18"},{"size":4038,"mtime":1612896390674,"results":"26","hashOfConfig":"18"},{"size":3285,"mtime":1612896383338,"results":"27","hashOfConfig":"18"},{"size":617,"mtime":1612902818902,"results":"28","hashOfConfig":"18"},{"size":252,"mtime":1612909734912,"results":"29","hashOfConfig":"18"},{"size":431,"mtime":1612904938907,"results":"30","hashOfConfig":"18"},{"size":2133,"mtime":1612906348231,"results":"31","hashOfConfig":"18"},{"size":448,"mtime":1612910082663,"results":"32","hashOfConfig":"18"},{"size":451,"mtime":1612910918204,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"18tz2gy",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/index.js",[],["69","70"],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/reportWebVitals.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/App.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Landing/Landing.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Settings/Settings.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/Header/Header.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/MyMap.js",["71"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker,\n    InfoWindow\n}\n    from \"@react-google-maps/api\";\nimport SearchMap from '../SearchMap/SearchMap'\nimport { dark } from \"./ColorThemes/dark\"\nimport { silver } from \"./ColorThemes/silver\"\nimport \"./MyMap.css\"\n\nconst mapContainerStyle = {\n    width: \"88vw\",\n    height: \"74vh\",\n    left: \"6vw\",\n    top: \"3vh\"\n}\nconst center = {\n    lat: 34.373112,\n    lng: 6.252371\n}\n\nfunction MyMap(props) {\n    const [libraries] = useState(['places']);\n\n    const { isLoaded, loadError } = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n        libraries,\n    });\n\n    //trips\n    const [markers, setMarkers] = useState([]);\n    const [selected, setSelected] = useState(null)\n    const [cityCount, setCities] = useState(\" \");\n    const [countryCount, setCountries] = useState(\" \");\n    const [showView, changeView] = useState(true)\n    const [dateView, changeDateView] = useState(false);\n    // Inputs\n    const [startDate, setStart] = useState('');\n    const [endDate, setEnd] = useState('');\n    const [ratingInp, setRating] = useState(0);\n    const [commentInp, setComment] = useState('');\n    const defaultId = 1;\n    // Editing Trip Info\n    const [toggleTripEdit, setToggleTripEdit] = useState(false)\n    const [newStartDate, setNewStart] = useState('')\n    const [newEndDate, setNewEnd] = useState('')\n    const [newRating, setNewRating] = useState('')\n    const [newComment, setNewComment] = useState('')\n    const [colors, setColors] = useState(null)\n\n    // useEffect(() => {\n    //     if (this.props.user.email) {\n    //         this.props.history.push('/myMap')\n    //     }\n    // }, [])\n\n    const fetchUser = async () => {\n        const userData = await axios.get(`/api/user/${defaultId}`);\n        // console.log(userData)\n        setCountries(userData.data.count[0].countries)\n        setCities(userData.data.count[0].cities)\n        setMarkers(userData.data.userData)\n        setUserColorOnLogin();\n    }\n\n    const setUserColorOnLogin = () => {\n        if (props.user.theme === \"dark\") {\n            setColors(dark)\n        } else if (props.user.theme === \"silver\") {\n            setColors(silver)\n        } else if (props.user.theme === \"null\") {\n            setColors(null)\n        }\n    }\n\n    useEffect(() => {\n        fetchUser()\n    }, []);\n\n    // let handleColorChange = (e) => {\n    //     setColors(e)\n    // }\n\n    useEffect(() => {\n        // console.log(props.colors)\n        let dbColor = '';\n        if (props.colors === dark) {\n            dbColor = \"dark\"\n        } else if (props.colors === null) {\n            dbColor = \"null\"\n        } else if (props.colors === silver) {\n            dbColor = \"silver\"\n        };\n        axios.put(`/api/color/${defaultId}`, { color: dbColor })\n            .then(() => setColors(props.colors))\n            .catch(err => console.log(err))\n    }, [props.colors])\n\n    let options = {\n        styles: colors,\n        disableDefaultUI: true,\n        zoomControl: true,\n        minZoom: 1.5\n    }\n\n    // too (hopefully) cause less re-renders\n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback((map) => {\n        mapRef.current = map;\n    }, []);\n\n    if (loadError) return \"Error loading maps\";\n    if (!isLoaded) return \"Loading Maps\"\n\n    const toggle = () => {\n        changeView(!showView)\n        setSelected(null)\n    }\n\n    const getCount = async () => {\n        const newCount = await axios.get(`/api/trip-count/${defaultId}`)\n        setCountries(newCount.data[0].countries)\n        setCities(newCount.data[0].cities)\n    }\n\n    // Add Markers\n    const addmarker = (coordinates) => {\n        axios.post('/api/newtrip', { id: props.user.id || defaultId, name: coordinates.address, lat: coordinates.lat, lng: coordinates.lng })\n            .then(res => {\n                getCount();\n                setMarkers(current => [...current, {\n                    name: coordinates.address,\n                    lat: coordinates.lat,\n                    lng: coordinates.lng,\n                    id: res.data.id //this is the trip id\n                }])\n            })\n\n            .catch(err => console.log(err))\n    }\n\n    // Delete Markers\n    const handleDelete = () => {\n        axios.delete(`/api/trip/${selected.id}`)\n            .then(res => {\n                console.log(res.data)\n                setMarkers(res.data.newMarkers)\n                setCities(res.data.count[0].cities)\n                setCountries(res.data.count[0].countries)\n            })\n            .catch(err => console.log(err))\n        setSelected(null)\n    }\n\n    const toggleDateView = () => {\n        changeDateView(!dateView)\n    }\n\n    // Submit Trip Info\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        axios.post(`/api/tripinfo/${defaultId}`, { id: selected.id, startDate, endDate, ratingInp, commentInp })\n            .then(res => {\n                let copyMarkers = [...markers];\n                for (let i = 0; i < copyMarkers.length; i++) {\n                    if (copyMarkers[i].id === res.data.trip_id) {\n                        copyMarkers[i].start_date = res.data.start_date\n                        copyMarkers[i].end_date = res.data.end_date\n                        copyMarkers[i].rating = res.data.rating\n                        copyMarkers[i].comment = res.data.comment\n                        setMarkers(copyMarkers)\n                    }\n                }\n                setStart('')\n                setEnd('')\n                setRating('')\n                setComment('')\n            })\n            .catch(err => console.log(err))\n    }\n\n    // Confirm Closing of Info Window\n    const confirmClose = () => {\n        let result = window.confirm('Are you sure you want to stop editing this trip? All your data will be lost')\n        if (result === true) {\n            setStart('')\n            setEnd('')\n            setRating('')\n            setComment('')\n            setSelected(null)\n        } else if (result === false) {\n            // console.log('you hit cancel')\n            let copySelected = selected\n            let copyStart = startDate;\n            let copyEnd = endDate;\n            let copyRating = ratingInp;\n            console.log(copyRating)\n            let copyComment = commentInp;\n            setSelected(null)\n            setSelected(copySelected)\n            setStart(copyStart)\n            setEnd(copyEnd)\n            setRating(+copyRating)\n            setComment(copyComment)\n        }\n    }\n\n    const handleClose = () => {\n        startDate || endDate || ratingInp || commentInp ? confirmClose() : setSelected(null)\n    }\n\n    const handleEdit = () => {\n        setToggleTripEdit(!toggleTripEdit)\n        setNewStart(selected.start_date.substring(0, 10))\n        setNewEnd(selected.end_date.substring(0, 10))\n        setNewRating(selected.rating)\n        setNewComment(selected.comment)\n    }\n\n    // Edit Trip Info\n    const handleTripEditSubmit = (e) => {\n        e.preventDefault();\n        axios.put(`/api/trip/${defaultId}`, {\n            trip_id: selected.id, start_date: newStartDate, end_date: newEndDate, rating: newRating, comment: newComment\n        })\n\n            .then(res => {\n                let copyMarkers = [...markers];\n                for (let i = 0; i < copyMarkers.length; i++) {\n                    if (copyMarkers[i].id === res.data.trip_id) {\n                        copyMarkers[i].start_date = res.data.start_date\n                        copyMarkers[i].end_date = res.data.end_date\n                        copyMarkers[i].rating = res.data.rating\n                        copyMarkers[i].comment = res.data.comment\n                        setMarkers(copyMarkers)\n                        setToggleTripEdit(!toggleTripEdit)\n                    }\n                }\n                setStart('')\n                setEnd('')\n                setRating('')\n                setComment('')\n\n            })\n            .catch(err => console.log(err))\n    }\n    console.log(props)\n    return (\n        <div id='map-background'>\n\n            {/* <h3>Color Options</h3>\n            <button onClick={() => handleColorChange(null)} >Default</button>\n            <button onClick={() => handleColorChange(dark)} >Dark</button>\n            <button onClick={() => handleColorChange(silver)} >Silver</button> */}\n\n\n            <GoogleMap className='myMap'\n                mapContainerStyle={mapContainerStyle}\n                zoom={2.15}\n                center={center}\n                options={options}\n                onLoad={onMapLoad} >\n\n                {showView\n                    ? (\n                        <h2 className='AddBtn' onClick={toggle} title='Click to add trips'>Add +</h2>\n                    )\n                    : (\n                        < div className='search-container'>\n                            <SearchMap addmarker={addmarker} />\n                            <h2 title=\"Click to close search\" className='MinusBtn' onClick={toggle}>-</h2>\n                        </div>\n\n                    )}\n\n                {markers.map((marker, i) => (\n                    < Marker\n                        key={i}\n                        title='Click to add trip info'\n                        position={{ lat: +marker.lat || marker.lat, lng: +marker.lng || marker.lng }}\n                        // icon = {{ url: \"\", scaledSize: new window.google.maps.Size(30, 30) }}\n                        onClick={() => {\n                            setSelected(marker);\n                            changeView(true)\n                        }}\n                    />\n                ))}\n\n                <div className=\"count\">\n                    <h2>Cities <br /><span className='countDisplay'>{cityCount}</span></h2>\n                    <h2>Countries <br /><span className='countDisplay'>{countryCount}</span></h2>\n                </div>\n\n                {selected ? (\n                    <InfoWindow\n                        // pixelOffset:\n                        position={{ lat: +selected.lat, lng: +selected.lng }}\n                        onCloseClick={() => {\n                            handleClose();\n                        }}\n                    >\n                        {selected.start_date || selected.end_date || selected.rating || selected.comment ? (\n                            <>\n                                <h2 className='formName'>{selected.name || selected.city + ', ' + selected.country}</h2>\n                                <button onClick={handleDelete} className='deleteBtn'>Delete</button>\n\n                                {/* on click of edit toggle view for that specific input back to the input view  */}\n                                {!toggleTripEdit ? (\n                                    <>\n                                        <span>Start Date: </span>\n                                        <span>{selected.start_date.substring(0, 10)}</span>\n                                        <br /><br />\n\n                                        <span>End Date: </span>\n                                        <span>{selected.end_date.substring(0, 10)}</span>\n\n                                        <br /><br />\n                                        <span>Rating: {selected.rating}</span>\n\n\n                                        <br /><br />\n                                        {/* <p id='notesHeader'><b>Notes</b></p> */}\n                                        <span>{selected.comment}</span>\n                                        <br /><br />\n                                        <button onClick={handleEdit}>Edit</button>\n\n                                        <br /><br />\n\n\n                                    </>\n\n                                ) : (\n                                        <>\n                                            <label>Start Date:</label>\n                                            <input type='date'\n                                                value={newStartDate}\n                                                onChange={e => setNewStart(e.target.value)}\n                                            />\n\n                                            <br /><br />\n\n                                            <label>End Date:</label>\n                                            <input id='endDateInp' type='date'\n                                                value={newEndDate}\n                                                onChange={e => setNewEnd(e.target.value)} />\n                                            <br /><br />\n\n                                            <label>Rating:</label>\n                                            <input value={newRating}\n                                                onChange={e => setNewRating(e.target.value)} />\n\n\n                                            {/* Text Area */}\n                                            <h3 id='review'>Review</h3>\n                                            <textarea value={newComment} onChange={e => setNewComment(e.target.value)} maxLength=\"1250\" rows='4' cols='20' /><br /><br />\n\n                                            <button onClick={handleEdit}>Back</button>\n                                            <button id='EditTripSubmit' onClick={handleTripEditSubmit}>Submit</button>\n                                            <br /><br />\n\n                                        </>\n                                    )}\n\n\n                            </>\n                        ) : (\n                                <>\n                                    <form onSubmit={handleSubmit}>\n                                        <button onClick={handleDelete} className='deleteBtn'>Delete</button>\n                                        <h2 className='formName'>{selected.name || selected.city + ', ' + selected.country}</h2>\n                                        <div className='tripInfoForm'>\n                                            {!dateView ?\n                                                (\n                                                    <h3 onClick={toggleDateView} id='review' >Add dates <span id='plus' title='Click to add Dates'>+</span></h3>\n                                                ) : (\n                                                    <div className='dumbclass'>\n                                                        {/* Trip Dates */}\n                                                        <label>Start Date:</label>\n                                                        <input type='date' value={startDate} onChange={e => setStart(e.target.value)} /><br />\n\n                                                        <label>End Date:</label>\n                                                        <input id='endDateInp' type='date' value={endDate} onChange={e => setEnd(e.target.value)} />\n\n                                                        <br />\n                                                        <p onClick={toggleDateView} id='back' title=\"Click to go back to 'Add Dates' view\">Back</p>\n                                                    </div>\n                                                )}\n\n\n                                            {/* Star Rating */}\n                                            <div className='ratingContainer'>\n                                                <h3 className='question'>Rating</h3>\n                                                <div className=\"rating\">\n                                                    <input onChange={e => setRating(e.target.name)} id=\"star5\" name={5} type=\"radio\" value={ratingInp} className=\"radio-btn hide\"\n                                                        checked={+ratingInp === 5} />\n                                                    <label htmlFor=\"star5\">☆</label>\n                                                    <input onChange={e => setRating(e.target.name)} id=\"star4\" name={4} type=\"radio\" value={ratingInp} className=\"radio-btn hide\"\n                                                        checked={+ratingInp === 4} />\n                                                    <label htmlFor=\"star4\">☆</label>\n                                                    <input onChange={e => setRating(e.target.name)} id=\"star3\" name={3} type=\"radio\" value={ratingInp} className=\"radio-btn hide\"\n                                                        checked={+ratingInp === 3} />\n                                                    <label htmlFor=\"star3\">☆</label>\n                                                    <input onChange={e => setRating(e.target.name)} id=\"star2\" name={2} type=\"radio\" value={ratingInp} className=\"radio-btn hide\"\n                                                        checked={+ratingInp === 2} />\n                                                    <label htmlFor=\"star2\">☆</label>\n                                                    <input onChange={e => setRating(e.target.name)} id=\"star1\" name={1} type=\"radio\" value={ratingInp} className=\"radio-btn hide\"\n                                                        checked={+ratingInp === 1} />\n                                                    <label htmlFor=\"star1\">☆</label>\n                                                    <div className=\"clear\"></div>\n                                                </div>\n                                            </div>\n\n\n                                            {/* Text Area */}\n                                            <h3 id='review'>Review</h3>\n                                            <textarea value={commentInp} onChange={e => setComment(e.target.value)} maxLength=\"1250\" rows='4' cols='20' /><br />\n\n                                        </div>\n                                        <input type=\"submit\" />\n                                    </form>\n                                </>\n                            )}\n\n                    </InfoWindow>) : null}\n            </GoogleMap>\n\n        </div >\n    )\n}\n\nconst mapStateToProps = reduxState => ({\n    user: reduxState.userReducer.user,\n    colors: reduxState.themeReducer.colors\n})\n\nexport default connect(mapStateToProps)(MyMap)","/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/noLabels.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/silver.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/MyMap/ColorThemes/dark.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/reducer.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/store.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/routes.js",[],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/Components/SearchMap/SearchMap.js",[],["72","73"],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/themereducer.js",["74","75"],"/Users/jacoborbach/DevMountain/personal-project/checkin-proj/src/dux/themeReducer.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":83,"column":8,"nodeType":"82","endLine":83,"endColumn":10,"suggestions":"83"},{"ruleId":"76","replacedBy":"84"},{"ruleId":"78","replacedBy":"85"},{"ruleId":"86","severity":2,"message":"87","line":11,"column":15,"nodeType":"88","messageId":"89","endLine":11,"endColumn":27},{"ruleId":"86","severity":2,"message":"87","line":20,"column":14,"nodeType":"88","messageId":"89","endLine":20,"endColumn":26},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array.","ArrayExpression",["92"],["90"],["91"],"no-undef","'colorChooser' is not defined.","Identifier","undef","no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [fetchUser]",{"range":"95","text":"96"},[2456,2458],"[fetchUser]"]